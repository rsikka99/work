<?php

use MPSToolbox\Legacy\Modules\QuoteGenerator\Models\QuoteDeviceGroupDeviceModel;
use MPSToolbox\Legacy\Modules\QuoteGenerator\Models\QuoteDeviceGroupModel;
use MPSToolbox\Legacy\Modules\QuoteGenerator\Models\QuoteModel;

$filename = $this->filename;
$savePath = PUBLIC_PATH . "/downloads/client/{$this->clientId}/orderlist/{$this->quoteId}/";

if (!is_dir($savePath))
{
    if (!mkdir($savePath, 0777, true))
    {
        throw new Exception("Could not open cache folder! PATH:" . $savePath, 0);
    }
}
$savePath = $savePath . $filename;

$linkToFile = $this->baseUrl("/downloads/client/{$this->clientId}/orderlist/{$this->quoteId}/{$filename}");


$quote = $this->Quote();
/* @var $quote QuoteModel */
$totalQuantity = 1;

$titles = [
    "Item",
    "SKU (OEM)",
    "SKU (DEALER)",
    "Serial Number",
    "Location"
];

$headerFill = [
    'type'  => PHPExcel_Style_Fill::FILL_SOLID,
    'color' => [
        'rgb' => 'D8D8D8'
    ]
];

$boldFont = [
    'font' => [
        'bold' => true
    ]
];

$styleHeader   = [
    'fill' => $headerFill,
    'font' => [
        'bold' => true,
        'size' => '16'
    ]
];
$styleFillBold = [
    'fill' => $headerFill,
    'font' => [
        'bold' => true
    ]
];

// Create a new PHPExcel Object * New PHPExcel objects will have one attached worksheet by default
/* @var $objPHPExcel PHPExcel */
$objPHPExcel = $this->phpexcel;
$activeSheet = $objPHPExcel->getActiveSheet();

// Ojbects in memory are held in PHP memory as serialized objects, reduces memory footpirnt with little performance hit
PHPExcel_CachedObjectStorageFactory::cache_in_memory_serialized;

// Set properties
$objPHPExcel->getProperties()->setTitle("Hardware Device List");
$objPHPExcel->setActiveSheetIndex(0);

// Start building the document
$activeSheet->setCellValue('A1', 'Hardware Device List');
$activeSheet->mergeCells('A1:E1');
// Centre the title
$activeSheet->getStyle("A1:E1:")
            ->getAlignment()
            ->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
$activeSheet->getStyle('A1:E1')->applyFromArray($styleHeader);
$activeSheet->getRowDimension('1')->setRowHeight(25);

// Go through each device and build and array for output
$quoteDeviceGroups = $quote->getQuoteDeviceGroups();
/* @var $quoteDeviceGroup QuoteDeviceGroupModel */
foreach ($quoteDeviceGroups as $quoteDeviceGroup)
{
    /* @var $quoteDeviceGroupDevice QuoteDeviceGroupDeviceModel */
    foreach ($quoteDeviceGroup->getQuoteDeviceGroupDevices() as $quoteDeviceGroupDevice)
    {
        $quoteDevice = $quoteDeviceGroupDevice->getQuoteDevice();
        // $device builds an array used to output quote device information
        $device = [
            $quoteDevice->name,
            $quoteDevice->oemSku,
            $quoteDevice->dealerSku
        ];

        // $deviceOptions builds an array of arrays representing quote device options
        $deviceOptions = [];
        //var $quoteDeviceOption MPSToolbox\Legacy\Modules\QuoteGenerator\Models\QuoteDeviceOptionModel */
        foreach ($quoteDeviceGroupDevice->getQuoteDevice()->getQuoteDeviceOptions() as $quoteDeviceOption)
        {
            $deviceOptions [] = [
                "name"      => $quoteDeviceOption->name,
                "oemSku"    => $quoteDeviceOption->oemSku,
                "dealerSku" => $quoteDeviceOption->dealerSku
            ];
        }

        // Build the data sheet
        // Object->getHighestRow() will return the row index where data has been entered in last.
        // This as well applies styles that have been defined that the beginning of the function
        for ($deviceCount = 0; $deviceCount < $quoteDeviceGroupDevice->quantity; $deviceCount++)
        {
            // Device Number Row
            $currentRow = $activeSheet->getHighestRow() + 2;
            $activeSheet->setCellValue("A{$currentRow}", "Device {$totalQuantity}");
            $activeSheet->mergeCells("A{$currentRow}:E{$currentRow}");
            $activeSheet->getStyle("A{$currentRow}:E{$currentRow}")->applyFromArray($styleFillBold);

            // Title Row
            $currentRow = $activeSheet->getHighestRow() + 1;
            $activeSheet->fromArray($titles, null, "A{$currentRow}");
            $activeSheet->getStyle("A{$currentRow}:E{$currentRow}")->applyFromArray($styleFillBold);

            // Device Row
            $currentRow = $activeSheet->getHighestRow() + 1;
            $activeSheet->fromArray($device, null, "A{$currentRow}");
            $activeSheet->getStyle("A{$currentRow}")->applyFromArray($boldFont);

            // Option Row
            // Use a foreach to go through options instead of using fromArray just in case
            // we require to style the option rows.
            foreach ($quoteDeviceGroupDevice->getQuoteDevice()->getQuoteDeviceOptions() as $quoteDeviceOption)
            {
                $currentRow = $activeSheet->getHighestRow() + 1;
                $activeSheet->setCellValue("A{$currentRow}", sprintf("%s x %s", number_format($quoteDeviceOption->quantity), $quoteDeviceOption->name));
                $activeSheet->setCellValue("B{$currentRow}", $quoteDeviceOption->oemSku);
                $activeSheet->setCellValue("C{$currentRow}", $quoteDeviceOption->dealerSku);
            }
            $totalQuantity++;
        }
    }
}

// Set the column width to be auto sized by default
// $activeSheet->getColumnDimension('A')->setAutoSize(true);
$activeSheet->getColumnDimension('A')->setWidth(40);
$activeSheet->getColumnDimension('B')->setAutoSize(true);
$activeSheet->getColumnDimension('C')->setAutoSize(true);
$activeSheet->getColumnDimension('D')->setAutoSize(true);
$activeSheet->getColumnDimension('E')->setAutoSize(true);

// Rename sheet
$activeSheet->setTitle('Hardware Device List');

// Save Excel 2007 file
$objWriter = new PHPExcel_Writer_Excel2007($objPHPExcel);
$objWriter->save($savePath);

//Clear the workbook from PHP's memory
$objPHPExcel->disconnectWorksheets();

echo $this->baseUrl($linkToFile);