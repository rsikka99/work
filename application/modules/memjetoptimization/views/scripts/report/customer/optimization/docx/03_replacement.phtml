<?php
/* @var $optimization Memjetoptimization_ViewModel_Optimization */
$optimization = $this->optimization;
/* @var $memjetOptimization Memjetoptimization_Model_Memjet_Optimization */
$memjetOptimization = $this->memjetOptimization;
/* @var $section PHPWord_Section */
$section = $this->section;
$section->addPageBreak();

/* @var $profitabilityDevices Memjetoptimization_Model_Optimization_Customer */
$profitabilityDevices  = $this->profitabilityDevices;
$deviceCount           = count($profitabilityDevices->replaced);
$totalPurchasedDevices = count($optimization->getDevices()->purchasedDeviceInstances->getDeviceInstances());

$section->addTitle(sprintf($this->translate('Suggested Replacement Devices (%1$s of %2$s)'), $deviceCount, $totalPurchasedDevices), 2);
$section->addText($this->translate('The following devices have been targeted for replacements: '));

$tcStyle = $this->devicetables->tables->replacement;
$table   = $section->addTable($tcStyle->tablestyle);
// Table header
$table->addRow($tcStyle->body->rowheight);
$table->addCell($tcStyle->col1Width, $tcStyle->header->header->cellStyle)->addText($this->translate('Current Device'), $tcStyle->header->header->fontStyle, $tcStyle->header->header->paragraphStyle);
$table->addCell($tcStyle->col2Width, $tcStyle->header->header->cellStyle)->addText($this->translate('Replacement Device'), $tcStyle->header->header->fontStyle, $tcStyle->header->header->paragraphStyle);
$table->addCell($tcStyle->col3Width, $tcStyle->header->header->cellStyle)->addText($this->translate('Serial / IP Address'), $tcStyle->header->header->fontStyle, $tcStyle->header->header->paragraphStyle);
$table->addCell($tcStyle->col4Width, $tcStyle->header->header->cellStyle)->addText($this->translate('Reason'), $tcStyle->header->header->fontStyle, $tcStyle->header->header->paragraphStyle);
$table->addCell($tcStyle->col5Width, $tcStyle->header->header->cellStyle)->addText($this->translate('Mono AMPV'), $tcStyle->header->header->fontStyle, $tcStyle->header->header->paragraphStyle);
$table->addCell($tcStyle->col6Width, $tcStyle->header->header->cellStyle)->addText($this->translate('Color AMPV'), $tcStyle->header->header->fontStyle, $tcStyle->header->header->paragraphStyle);
// Begin with data rows
foreach ($profitabilityDevices->replaced as $device)
{
    $replacementDevice = $device->getReplacementMasterDeviceForMemjetOptimization($memjetOptimization);
    $isColor           = $replacementDevice->isColor();
    $cycle             = ($this->cycle(array(true, false))->next()->current());
    if ($cycle)
    {
        $ampvStyle = $tcStyle->body->cell5->even;
        $style     = $tcStyle->body->cell1->even;
    }
    else
    {
        $ampvStyle = $tcStyle->body->cell5->odd;
        $style     = $tcStyle->body->cell1->odd;
    }


    $table->addRow($tcStyle->body->rowheight);
    // Device Instance
    $cell = $table->addCell($tcStyle->collWidth, $style);
    $cell->addText($device->getMasterDevice()->getManufacturer()->fullname, $tcStyle->body->cell1->manufacturerName->fontStyle, $tcStyle->body->cell1->manufacturerName->paragraphStyle);
    $cell->addText($device->getMasterDevice()->modelName, $tcStyle->body->cell1->modelName->fontStyle, $tcStyle->body->cell1->modelName->paragraphStyle);
    // Replacement device
    $cell = $table->addCell($tcStyle->col2Width, $style);
    $cell->addText($device->getMasterDevice()->getManufacturer()->fullname, $tcStyle->body->cell2->manufacturerName->fontStyle, $tcStyle->body->cell2->manufacturerName->paragraphStyle);
    $cell->addText($device->getMasterDevice()->modelName, $tcStyle->body->cell2->modelName->fontStyle, $tcStyle->body->cell2->modelName->paragraphStyle);

    $cell3 = $table->addCell($tcStyle->col3Width, $style);
    $cell3->addText($device->serialNumber, $tcStyle->body->cell3->fontStyle, $tcStyle->body->cell3->paragraphStyle);
    $cell3->addText($device->ipAddress, $tcStyle->body->cell3->fontStyle, $tcStyle->body->cell3->paragraphStyle);

    $table->addCell($tcStyle->col4Width, $ampvStyle)->addText($device->getMemjetReason($memjetOptimization->id), $tcStyle->body->cell4->fontStyle, $tcStyle->body->cell4->paragraphStyle);
    $table->addCell($tcStyle->col5Width, $ampvStyle)->addText(number_format($device->getPageCounts(($replacementDevice->isColor() && $device->getMasterDevice()->isColor() == false) ? $memjetOptimization->getMemjetOptimizationSetting()->blackToColorRatio : null)->getBlackPageCount()->getMonthly()), $tcStyle->body->cell5->fontStyle, $tcStyle->body->cell5->paragraphStyle);
    $table->addCell($tcStyle->col6Width, $ampvStyle)->addText(($isColor) ? number_format($device->getPageCounts(($replacementDevice->isColor() && $device->getMasterDevice()->isColor() == false) ? $memjetOptimization->getMemjetOptimizationSetting()->blackToColorRatio : null)->getColorPageCount()->getMonthly()) : 'N/A', $tcStyle->body->cell6->fontStyle, $tcStyle->body->cell6->paragraphStyle);
}

$section->addTextBreak();


$section->addTitle($this->translate('Memjet Utilization and Capacity'), 2);
$section->addImage($this->graphs[4], $this->styles->images->center);
$section->addTitle($this->translate('Print Volume and Number of Printing Devices'), 2);
$section->addText(sprintf($this->translate('You currently have %1$s networked printing devices that print an average of %2$s pages each per month, for an average total monthly print volume of %3$s pages. Ideally, you should have the minimum amount of printing hardware required to meet your print demand while maintaining user productivity.'), number_format($optimization->getDevices()->allIncludedDeviceInstances->getCount()), number_format(($optimization->getDevices()->allIncludedDeviceInstances->getPageCounts()->getCombinedPageCount()->getMonthly() / $optimization->getDevices()->allIncludedDeviceInstances->getCount())), number_format($optimization->getDevices()->allIncludedDeviceInstances->getPageCounts()->getCombinedPageCount()->getMonthly())));
$section->addTextBreak();

$imageTable = $section->addTable($this->styles->tables->doubleimage->tablestyle);
$imageTable->addRow();
$imageTable->addCell(4514, $this->styles->tables->doubleimage->cell1)->addImage($this->graphs [5], array('align' => 'center'));
$imageTable->addCell(4514, $this->styles->tables->doubleimage->cell2)->addImage($this->graphs [6], array('align' => 'center'));
$imageTable->addCell(4514, $this->styles->tables->doubleimage->cell2)->addImage($this->graphs [7], array('align' => 'center'));
$section->addTextBreak();